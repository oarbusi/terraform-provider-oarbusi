name: "New Release (backport v1)"
run-name: "Release ${{ inputs.version_number }} (skip tests: ${{ inputs.skip_tests }}, use existing tag: ${{ inputs.use_existing_tag}})"

# Used for creating a new release. This workflow will run qa acceptance tests, create a new tag, and generate the release with GoReleaser.
on:
    workflow_dispatch:
        inputs:
            version_number:
                description: "Version number (e.g., v1.0.0, v1.0.0-pre, v1.0.0-pre1)"
                required: true
            skip_tests:
                description: "Set value to `true` to skip QA acceptance tests, default is `false`"
                default: "false"
            use_existing_tag:
                description: "Set value to `true` to use an existing tag for the release process, default is `false`"
                default: "false"

jobs:
    release-config:
        runs-on: ubuntu-latest
        permissions: {}
        outputs:
            creates_new_tag: ${{ steps.evaluate_inputs.outputs.creates_new_tag }}
            is_official_release: ${{ steps.evaluate_inputs.outputs.is_official_release }}
            runs_tests: ${{ steps.evaluate_inputs.outputs.runs_tests }}
        steps:
            - id: evaluate_inputs
              run: |
                  {
                    echo "creates_new_tag=$(if [ '${{ inputs.use_existing_tag }}' = 'true' ]; then echo 'false'; else echo 'true'; fi)"
                    echo "is_official_release=$(if echo '${{ inputs.version_number }}' | grep -q 'pre'; then echo 'false'; else echo 'true'; fi)"
                    echo "runs_tests=$(if [ '${{ inputs.skip_tests }}' = 'true' ]; then echo 'false'; else echo 'true'; fi)"
                  } >> "$GITHUB_OUTPUT"

    validate-inputs:
        runs-on: ubuntu-latest
        permissions: {}
        steps:
            - name: Validation of version format
              run: |
                  echo "${{ inputs.version_number }}" | grep -P '^v1\.\d+\.\d+(-pre[A-Za-z0-9-]*)?$'
            - name: Checkout
              uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
              with:
                  ref: ${{ inputs.use_existing_tag == 'true' && inputs.version_number || 'main-v1' }}

    create-tag:
        runs-on: ubuntu-latest
        permissions:
            contents: write
        needs: [release-config, validate-inputs]
        if: >-
            !cancelled()
            && !contains(needs.*.result, 'failure') 
            && needs.release-config.outputs.creates_new_tag == 'true'
        steps:
            - name: Checkout
              uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
              with:
                  ref: "main-v1"
            - name: Get the latest commit SHA
              id: get-sha
              run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
            - name: Create release tag
              uses: rickstaa/action-create-tag@a1c7777fcb2fee4f19b0f283ba888afa11678b72
              with:
                  tag: ${{ inputs.version_number }}
                  commit_sha: ${{ steps.get-sha.outputs.sha }}
                  gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
                  gpg_passphrase: ${{ secrets.PASSPHRASE }}

    release:
        runs-on: ubuntu-latest
        permissions:
            contents: write
        needs: [create-tag]
        if: >-
            !cancelled()
            && !contains(needs.*.result, 'failure')
            && needs.create-tag.result == 'success'
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
              with:
                  # Allow goreleaser to access older tag information.
                  fetch-depth: 0
                  ref: ${{ inputs.version_number }}
            - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
              with:
                  go-version-file: "go.mod"
                  cache: true
            - name: Import GPG key
              uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
              id: import_gpg
              with:
                  gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
                  passphrase: ${{ secrets.PASSPHRASE }}
            - name: Run GoReleaser
              uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
              with:
                  version: "~> v2"
                  args: release --clean
              env:
                  # GitHub sets the GITHUB_TOKEN secret automatically.
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
